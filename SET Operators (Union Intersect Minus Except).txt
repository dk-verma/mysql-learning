---------------------- UNION, INTERSECT, EXCEPT and MINUS ----------------------
create or replace table employees(employee_id number,
                     empl_join_date date,
                     dept varchar(10),
                     salary number,
                     manager_id number);
                     
insert into employees values(1,'2014-10-01','HR',40000,4),
                                 (2,'2014-09-01','Tech',50000,9),
                                 (3,'2018-09-01','Marketing',30000,5),
                                 (4,'2017-09-01','HR',10000,5),
                                 (5,'2019-09-01','HR',35000,9),
                                 (6,'2015-09-01','Tech',90000,4),
                                 (3,'2018-09-01','Marketing',30000,5),
                                 (7,'2016-09-01','Marketing',20000,1);
                  
                  
create or replace table new_employees(employee_id number,
                     empl_join_date date,
                     dept varchar(10),
                     salary number,
                     manager_id number);
                     
insert into new_employees values(8,'2014-10-01','HR',40000,4),
                                 (12,'2014-09-01','Tech',50000,9),
                                 (3,'2018-09-01','Marketing',30000,5),
                                 (4,'2017-09-01','HR',10000,5),
                                 (25,'2019-09-01','HR',35000,9),
                                 (12,'2014-09-01','Tech',50000,9),
                                 (86,'2015-09-01','Tech',90000,4),
                                 (73,'2016-09-01','Marketing',20000,1);
                                 
/*
--- UNION ---
    -- The SQL UNION clause/operator is used to combine the results of two or more SELECT statements without returning any duplicate rows.
    -- To use this UNION clause, each SELECT statement must have
        - the same number of columns
        - The same data type
        - The columns in each SELECT statement must also be in the same order
    -- However, similar columns in different SELECT statements need not have to be in the same length.
*/

select * from new_employees
UNION
select * from employees;

select dept from employees
UNION
select dept from new_employees;

select employee_id, dept from employees
UNION
select dept from new_employees;

select * from employees where empl_join_date >= '2016-01-01'
UNION
select * from new_employees;

select * from employees where empl_join_date >= '2016-01-01'
UNION
select * from new_employees where dept = 'Tech'
UNION
Select * from employees;


--- UNION ALL ---
    -- The UNION ALL operator is used to combine the results of two SELECT statements including duplicate rows.
    -- The same rules that apply to the UNION clause will apply to the UNION ALL operator.

select * from employees
UNION ALL
select * from new_employees;

select dept from employees
UNION ALL
select dept from new_employees;

select employee_id, dept from employees
UNION ALL
select dept from new_employees;

select * from employees where empl_join_date >= '2016-01-01'
UNION ALL
select * from new_employees;

create table xyz as
select * from employees where empl_join_date >= '2016-01-01'
UNION ALL
select * from new_employees where dept = 'Tech';

select * from xyz;


--- INTERSECT ---
/*
    -- The SQL INTERSECT clause/operator is used to combine two SELECT statements, 
       but returns rows only from the first SELECT statement that are identical to a row in the second SELECT statement. 
       This means INTERSECT returns only common rows returned by the two SELECT statements.
    -- Just as with the UNION operator, the same rules apply when using the INTERSECT operator
*/

select * from employees
INTERSECT
select * from new_employees;

select dept from employees
INTERSECT
select dept from new_employees;

select employee_id, dept from employees
INTERSECT
select dept from new_employees;

select * from employees where empl_join_date >= '2016-01-01'
INTERSECT
select * from new_employees;

select * from employees where empl_join_date >= '2016-01-01'
INTERSECT
select * from new_employees where dept = 'Tech';


--- MINUS ---
    -- The SQL MINUS operator is used to return all rows in the first SELECT statement that are not returned by the second SELECT statement. 
    -- Each SELECT statement will define a dataset. 
    -- The MINUS operator will retrieve all records from the first dataset and then remove from the results all records from the second dataset.
select * from employees
MINUS
select * from new_employees;

select dept from employees
MINUS
select dept from new_employees;

select employee_id, dept from employees
MINUS
select dept from new_employees;

select * from employees where empl_join_date >= '2016-01-01'
MINUS
select * from new_employees;

select * from employees where empl_join_date >= '2016-01-01'
MINUS
select * from new_employees where dept = 'Tech';

--- EXCEPT ---
    -- There is absolutely no difference in the EXCEPT clause and the MINUS clause. 
    -- They both serve the same purpose and they are simply two different ways of achieving the same functionality.
    -- The SQL EXCEPT operator is used to return all rows in the first SELECT statement that are not returned by the second SELECT statement. 
    -- Each SELECT statement will define a dataset. 
    -- The EXCEPT operator will retrieve all records from the first dataset and then remove from the results all records from the second dataset.
select * from employees
EXCEPT
select * from new_employees;

select dept from employees
EXCEPT
select dept from new_employees;

select employee_id, dept from employees
EXCEPT
select dept from new_employees;

select * from employees where empl_join_date >= '2016-01-01'
EXCEPT
select * from new_employees;

select * from employees where empl_join_date >= '2016-01-01'
EXCEPT
select * from new_employees where dept = 'Tech';

