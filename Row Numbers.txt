---------------------- WORKING WITH ROW NUMBERS ----------------------
/* 
-- Working with Row Numbers in snowflake is straight forward as in other Databases such as Oracle, MySQL, Postgres
-- We will learn two ways to generate row numbers for a table and then, will perform operations on it

-------- SEQUENCES -------- 
-- CREATE SEQUENCE: Creates a new sequence, which can be used for generating sequential, unique numbers.
*/

CREATE OR REPLACE SEQUENCE sequence1 
start = 1 
INCREMENT = 1 
comment = 'this sequence will be used to generate employee IDs';

select * from "DEMO_DB"."INFORMATION_SCHEMA"."SEQUENCES";

show sequences;

create or replace table employees(employee_id1 integer,
                     employee_id number,
                     empl_join_date date,
                     dept varchar(10),
                     salary number,
                     manager_id number);
                                 
insert into employees values(sequence1.nextval, 1,'2014-10-01','HR',40000,4),
                                 (sequence1.nextval, 2,'2014-09-01','Tech',50000,9),
                                 (sequence1.nextval, 3,'2018-09-01','Marketing',30000,5),
                                 (sequence1.nextval, 4,'2017-09-01','HR',10000,5),
                                 (sequence1.nextval, 5,'2019-09-01','HR',35000,9),
                                 (sequence1.nextval, 6,'2015-09-01','Tech',90000,4),
                                 (sequence1.nextval, 3,'2018-09-01','Marketing',30000,5),
                                 (sequence1.nextval, 7,'2016-09-01','Marketing',20000,1);

select * from employees;

-- verify what next value of sequence will be
show sequences;


// Better solution:
CREATE OR REPLACE SEQUENCE sequence2
start = 1 
INCREMENT = 1 
comment = 'will be used to generate sequential numbers';

create or replace table employees(employee_id1 integer default sequence2.nextval,
                     employee_id number,
                     empl_join_date date,
                     dept varchar(10),
                     salary number,
                     manager_id number);

insert into employees (employee_id, empl_join_date, dept, salary, manager_id) 
                           values(1,'2014-10-01','HR',40000,4),
                                 (2,'2014-09-01','Tech',50000,9),
                                 (3,'2018-09-01','Marketing',30000,5),
                                 (4,'2017-09-01','HR',10000,5),
                                 (5,'2019-09-01','HR',35000,9),
                                 (6,'2015-09-01','Tech',90000,4),
                                 (3,'2018-09-01','Marketing',30000,5),
                                 (7,'2016-09-01','Marketing',20000,1);
                                 
select * from employees;


-------- IDENTITY --------
/*
-- Identity column of a table is a column whose value increases automatically. 
-- The value in an identity column is created by the server. 
-- A user generally cannot insert a value into an identity column. 
-- Identity column can be used to uniquely identify the rows in the table.
*/

create or replace table employees(row_number integer identity(1001,1),
                     employee_id number,
                     empl_join_date date,
                     dept varchar(10),
                     salary number,
                     manager_id number);
                     
insert into employees (employee_id, empl_join_date, dept, salary, manager_id) 
                           values(1,'2014-10-01','HR',40000,4),
                                 (2,'2014-09-01','Tech',50000,9),
                                 (3,'2018-09-01','Marketing',30000,5),
                                 (4,'2017-09-01','HR',10000,5),
                                 (5,'2019-09-01','HR',35000,9),
                                 (6,'2015-09-01','Tech',90000,4),
                                 (3,'2018-09-01','Marketing',30000,5),
                                 (7,'2016-09-01','Marketing',20000,1);

select * from employees;


-------- AUTOINCREMENT --------
/*
-- Auto-increment allows a unique number to be generated automatically when a new record is inserted into a table.
-- Often this is the primary key field that we would like to be created automatically every time a new record is inserted.
*/

create or replace table employees(row_number integer autoincrement start 102000 increment 10,
                     employee_id number,
                     empl_join_date date,
                     dept varchar(10),
                     salary number,
                     manager_id number);
                     
insert into employees (employee_id, empl_join_date, dept, salary, manager_id) 
                           values(1,'2014-10-01','HR',40000,4),
                                 (2,'2014-09-01','Tech',50000,9),
                                 (3,'2018-09-01','Marketing',30000,5),
                                 (4,'2017-09-01','HR',10000,5),
                                 (5,'2019-09-01','HR',35000,9),
                                 (6,'2015-09-01','Tech',90000,4),
                                 (3,'2018-09-01','Marketing',30000,5),
                                 (7,'2016-09-01','Marketing',20000,1);

select * from employees;


-------- ROW_NUMBER function --------
-- Returns a unique row number for each row within a partition.
-- The row number starts at 1 and continues up sequentially.

select * from employees;

select row_number() over (partition by dept order by salary desc) as counter, * from employees;

select row_number() over (order by NULL) as counter, * from employees;

select row_number() over (order by 1) as counter, * from employees;


--METADATA TABLES
---------------------- INFORMATION SCHEMA ----------------------
/*
-- Each database created in snowlfake account automatically includes a built-in, read-only schema named INFORMATION_SCHEMA. 
-- The schema contains the following objects:
    -- Views for all the objects contained in the database, 
       as well as views for account-level objects (i.e. non-database objects such as roles, warehouses, and databases)
    -- Table functions for historical and usage data across your account.
    -- All other metadata about tables, schemas, views, columns, pipes, procedures etc. of the Database
*/

select * from "SNOWFLAKE_SAMPLE_DATA"."INFORMATION_SCHEMA"."COLUMNS" order by table_schema;
select * from "SNOWFLAKE_SAMPLE_DATA"."INFORMATION_SCHEMA"."TABLES";

select * 
from "SNOWFLAKE_SAMPLE_DATA"."INFORMATION_SCHEMA"."TABLES"
where table_schema = 'TPCH_SF1';

drop table customer;

SELECT 'drop table '||table_name||';' as drop_tables
FROM  "SNOWFLAKE_SAMPLE_DATA"."INFORMATION_SCHEMA"."TABLES" tables 
WHERE table_schema = 'TPCH_SF1'
ORDER BY 1;

drop table CUSTOMER;
drop table JCUSTOMER;
drop table JLINEITEM;
drop table JNATION;
drop table JORDERS;
drop table JPART;
drop table JPARTSUPP;
drop table JREGION;
drop table JSUPPLIER;
drop table LINEITEM;
drop table NATION;
drop table ORDERS;
drop table PART;
drop table PARTSUPP;
drop table REGION;
drop table SUPPLIER;

select * from information_schema.load_history where table_name = 'EMPLOYEE';
METADATA$FILE_ROW_NUMBER;


---------------------- COPY TABLE ----------------------
-- How to create a copy of existing table?

create or replace table new_employees(employee_id number,
                     empl_join_date date,
                     dept varchar(10),
                     salary number,
                     manager_id number);
                     
insert into new_employees values(8,'2014-10-01','HR',40000,4),
                                 (12,'2014-09-01','Tech',50000,9),
                                 (3,'2018-09-01','Marketing',30000,5),
                                 (4,'2017-09-01','HR',10000,5),
                                 (25,'2019-09-01','HR',35000,9),
                                 (12,'2014-09-01','Tech',50000,9),
                                 (86,'2015-09-01','Tech',90000,4),
                                 (73,'2016-09-01','Marketing',20000,1);

-------- using CREATE TABLE AS SELECT --------- <Also referred as CTAS>
--drop table employees;
create or replace table employees as select * from new_employees;


insert into employees select * from new_employees;

select * from employees;


------------ using CLONE keyword ------------
CREATE OR REPLACE TABLE employees_clone CLONE employees;

select * from employees_clone;


------------ using LIKE keyword ------------
CREATE OR REPLACE TABLE employees_like LIKE employees;

select * from employees_like;


